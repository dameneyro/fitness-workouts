{"ast":null,"code":"var _jsxFileName = \"/Users/dominicameneyro/Desktop/Life/Fitness/UI/fitness-workouts/src/components/ExerciseForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExerciseForm = ({\n  workoutId,\n  exercise,\n  onSubmit,\n  onBack\n}) => {\n  _s();\n  const [reps, setReps] = useState('');\n  const [weight, setWeight] = useState('');\n  const [restTime, setRestTime] = useState('');\n  //   const [currentSet, setCurrentSet] = useState(1);\n  const [exerciseNumberOfSets, setExerciseNumberOfSets] = useState(1);\n  const [completedSets, setCompletedSets] = useState([]);\n  const [currentSetIndex, setCurrentSetIndex] = useState(0);\n  const [completedExerciseId, setCompletedExerciseId] = useState(null);\n  useEffect(() => {\n    console.log(\"workout starting...\");\n    initializeExercise();\n  }, [exercise]);\n  const initializeExercise = async () => {\n    try {\n      console.log(\"initializing a new exercise...\");\n      const startTime = new Date().toISOString();\n      const response = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          exercise_id: exercise.exercise_id,\n          start_time: startTime\n        })\n      });\n      const data = await response.json();\n      console.log(\"new exercise = \");\n      setCompletedExerciseId(data.completedExerciseId);\n      switch (data.set_type_id) {\n        case 1:\n          setExerciseNumberOfSets(3);\n          break;\n        case 4:\n          setExerciseNumberOfSets(1);\n          break;\n        default:\n          setExerciseNumberOfSets(3);\n      }\n      const setResponse = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises/${data.completedExerciseId}/sets`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reps: '',\n          weight: '',\n          rest_time: ''\n        }) // Initialize with empty values\n      });\n      const setData = await setResponse.json();\n      await setCompletedSets(prevSets => [...prevSets, setData.set]);\n      //   await setCurrentSet(1); // Reset currentSet for each exercise\n      //   console.log(\"NEW CURRENT SET: \", currentSet)\n      //   setCurrentSet();\n      console.log(exerciseNumberOfSets, \" Sets\");\n      console.log(\"First set: \", setData.set);\n    } catch (error) {\n      console.error('Error initializing exercise:', error);\n    }\n  };\n  const saveSet = async () => {\n    try {\n      console.log(\"Saving Set? These are your options\", completedSets);\n      if (completedExerciseId !== null && completedSets[currentSetIndex]) {\n        console.log(\"We're saving\");\n        const setId = completedSets[currentSetIndex][\"completed_set_id\"];\n        const response = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises/${completedExerciseId}/sets/${setId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            reps,\n            weight,\n            rest_time: restTime\n          })\n        });\n        const data = await response.json();\n        console.log(\"return from saving a set: \", data);\n        await setCompletedSets(prevSets => {\n          const newSets = [...prevSets];\n          console.log(\"Previous sets: \", prevSets);\n          console.log(\"Wanna update with this: \", data);\n          console.log(\"Old: \", newSets[currentSetIndex]);\n          newSets[currentSetIndex] = data;\n          console.log(\"New: \", newSets[currentSetIndex]);\n          return newSets;\n        });\n      }\n    } catch (error) {\n      console.error('Error saving set:', error);\n    }\n  };\n  const createNewSet = async () => {\n    try {\n      const response = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises/${completedExerciseId}/sets`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          reps: '',\n          weight: '',\n          rest_time: ''\n        }) // Initialize with empty values\n      });\n      const setData = await response.json();\n      await setCompletedSets(prevSets => [...prevSets, setData.set]);\n      //   await setCurrentSet((currentSet) => currentSet + 1)\n    } catch (error) {\n      console.error('Error creating new set:', error);\n    }\n  };\n  const handleSetChange = setter => e => {\n    setter(e.target.value);\n  };\n  const handleNextSet = async () => {\n    console.log(\"Handling next...\");\n    await saveSet();\n    setReps('');\n    setWeight('');\n    setRestTime('');\n    if (exercise.set_type_id === 1) {\n      //&& currentSet != 3) { // CHANGE THIS OR UPDATE THIS LOGIC TO SWITCH BETEWEN EXERCISES\n      await createNewSet();\n      setCurrentSetIndex(prevIndex => prevIndex + 1);\n      // console.log(\"CURRENT SET:\", currentSet)\n      console.log(\"This should have added a set: \", completedSets);\n    } else {\n      onSubmit();\n    }\n  };\n  const handlePreviousSet = () => {\n    saveSet();\n    setCurrentSetIndex(prevIndex => Math.max(prevIndex - 1, 0));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: exercise.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: exercise.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), exercise.set_type_id === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Set \", currentSetIndex + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [exercise.min_reps, \" - \", exercise.max_reps, \" reps\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Recommended weight: \", exercise.goal_weight]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Burn Set\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Reps:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: reps,\n        onChange: handleSetChange(setReps)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Weight:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: weight,\n        onChange: handleSetChange(setWeight)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Rest Time:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: restTime,\n        onChange: handleSetChange(setRestTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePreviousSet,\n        children: \"Previous Set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextSet,\n        children: \"Next Set\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onBack,\n        children: \"Previous Exercise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onSubmit,\n        children: \"Next Exercise\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Completed Sets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), completedSets.map((set, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Set \", index + 1, \": \", set.reps, \" reps, \", set.weight, \" lbs\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(ExerciseForm, \"tKfzsRGjk95eOWVCQAUBxS+9DqI=\");\n_c = ExerciseForm;\nexport default ExerciseForm;\nvar _c;\n$RefreshReg$(_c, \"ExerciseForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","ExerciseForm","workoutId","exercise","onSubmit","onBack","_s","reps","setReps","weight","setWeight","restTime","setRestTime","exerciseNumberOfSets","setExerciseNumberOfSets","completedSets","setCompletedSets","currentSetIndex","setCurrentSetIndex","completedExerciseId","setCompletedExerciseId","console","log","initializeExercise","startTime","Date","toISOString","response","fetch","method","headers","body","JSON","stringify","exercise_id","start_time","data","json","set_type_id","setResponse","rest_time","setData","prevSets","set","error","saveSet","setId","newSets","createNewSet","handleSetChange","setter","e","target","value","handleNextSet","prevIndex","handlePreviousSet","Math","max","children","name","fileName","_jsxFileName","lineNumber","columnNumber","description","min_reps","max_reps","goal_weight","type","onChange","onClick","map","index","_c","$RefreshReg$"],"sources":["/Users/dominicameneyro/Desktop/Life/Fitness/UI/fitness-workouts/src/components/ExerciseForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ExerciseForm = ({ workoutId, exercise, onSubmit, onBack }) => {\n  const [reps, setReps] = useState('');\n  const [weight, setWeight] = useState('');\n  const [restTime, setRestTime] = useState('');\n//   const [currentSet, setCurrentSet] = useState(1);\n  const [exerciseNumberOfSets, setExerciseNumberOfSets] = useState(1)\n  const [completedSets, setCompletedSets] = useState([]);\n  const [currentSetIndex, setCurrentSetIndex] = useState(0);\n  const [completedExerciseId, setCompletedExerciseId] = useState(null);\n\n  useEffect(() => {\n    console.log(\"workout starting...\")\n    initializeExercise();\n  }, [exercise]);\n\n  const initializeExercise = async () => {\n    try {\n        console.log(\"initializing a new exercise...\")\n      const startTime = new Date().toISOString();\n      const response = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ exercise_id: exercise.exercise_id, start_time: startTime }),\n      });\n  \n      const data = await response.json();\n      console.log(\"new exercise = \",)\n      setCompletedExerciseId(data.completedExerciseId);\n      \n      switch(data.set_type_id) {\n        case 1:\n          setExerciseNumberOfSets(3)\n          break;\n        case 4:\n          setExerciseNumberOfSets(1)\n          break;\n        default:\n          setExerciseNumberOfSets(3)\n      }\n  \n      const setResponse = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises/${data.completedExerciseId}/sets`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reps: '', weight: '', rest_time: '' }), // Initialize with empty values\n      });\n  \n      const setData = await setResponse.json();\n      await setCompletedSets((prevSets) => [...prevSets, setData.set]);\n    //   await setCurrentSet(1); // Reset currentSet for each exercise\n    //   console.log(\"NEW CURRENT SET: \", currentSet)\n    //   setCurrentSet();\n    console.log(exerciseNumberOfSets, \" Sets\")\n    console.log(\"First set: \", setData.set)\n    } catch (error) {\n      console.error('Error initializing exercise:', error);\n    }\n  };\n  \n\n  const saveSet = async () => {\n    try {\n      console.log(\"Saving Set? These are your options\", completedSets)\n      if (completedExerciseId !== null && completedSets[currentSetIndex]) {\n        console.log(\"We're saving\")\n        const setId = completedSets[currentSetIndex][\"completed_set_id\"];\n        const response = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises/${completedExerciseId}/sets/${setId}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            reps,\n            weight,\n            rest_time: restTime,\n          }),\n        });\n        const data = await response.json();\n        console.log(\"return from saving a set: \", data)\n        await setCompletedSets((prevSets) => {\n          const newSets = [...prevSets];\n          console.log(\"Previous sets: \", prevSets)\n          console.log(\"Wanna update with this: \", data)\n          console.log(\"Old: \", newSets[currentSetIndex])\n          newSets[currentSetIndex] = data;\n          console.log(\"New: \", newSets[currentSetIndex])\n          return newSets;\n        });\n\n      }\n    } catch (error) {\n      console.error('Error saving set:', error);\n    }\n  };\n\n  const createNewSet = async () => {\n    try {\n      const response = await fetch(`https://bwg36wqc6b.execute-api.us-east-1.amazonaws.com/dev/workouts/${workoutId}/exercises/${completedExerciseId}/sets`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ reps: '', weight: '', rest_time: '' }), // Initialize with empty values\n      });\n  \n      const setData = await response.json();\n      await setCompletedSets((prevSets) => [...prevSets, setData.set]);\n    //   await setCurrentSet((currentSet) => currentSet + 1)\n    } catch (error) {\n      console.error('Error creating new set:', error);\n    }\n  };\n  \n\n  const handleSetChange = (setter) => (e) => {\n    setter(e.target.value);\n  };\n\n  const handleNextSet = async () => {\n    console.log(\"Handling next...\")\n    await saveSet();\n    setReps('');\n    setWeight('');\n    setRestTime('');\n    if (exercise.set_type_id === 1) { //&& currentSet != 3) { // CHANGE THIS OR UPDATE THIS LOGIC TO SWITCH BETEWEN EXERCISES\n        await createNewSet();\n        setCurrentSetIndex((prevIndex) => prevIndex + 1);\n        // console.log(\"CURRENT SET:\", currentSet)\n        console.log(\"This should have added a set: \", completedSets)\n    } else {\n        onSubmit();\n    }\n\n    \n  };\n\n  const handlePreviousSet = () => {\n    saveSet();\n    setCurrentSetIndex((prevIndex) => Math.max(prevIndex - 1, 0));\n  };\n\n  return (\n    <div>\n      <h2>{exercise.name}</h2>\n      <p>{exercise.description}</p>\n      {exercise.set_type_id === 1 ? (\n        <>\n          {/* this is going to need to be adjusted to handle burn sets and counting only sets in the exercise */}\n          <p>Set {currentSetIndex + 1}</p> \n          <p>{exercise.min_reps} - {exercise.max_reps} reps</p>\n          <p>Recommended weight: {exercise.goal_weight}</p>\n        </>\n      ) : (\n        <p>Burn Set</p>\n      )}\n      <div>\n        <label>Reps:</label>\n        <input type=\"number\" value={reps} onChange={handleSetChange(setReps)} />\n      </div>\n      <div>\n        <label>Weight:</label>\n        <input type=\"number\" value={weight} onChange={handleSetChange(setWeight)} />\n      </div>\n      <div>\n        <label>Rest Time:</label>\n        <input type=\"number\" value={restTime} onChange={handleSetChange(setRestTime)} />\n      </div>\n      <div>\n        <button onClick={handlePreviousSet}>Previous Set</button>\n        <button onClick={handleNextSet} >Next Set</button>\n      </div>\n      <div>\n        <button onClick={onBack}>Previous Exercise</button>\n        <button onClick={onSubmit}>Next Exercise</button>\n      </div>\n      <div>\n        <h3>Completed Sets</h3>\n        {completedSets.map((set, index) => (\n          <p key={index}>Set {index + 1}: {set.reps} reps, {set.weight} lbs</p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ExerciseForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,SAAS;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C;EACE,MAAM,CAACkB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACwB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAEpEC,SAAS,CAAC,MAAM;IACdyB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClCC,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACpB,QAAQ,CAAC,CAAC;EAEd,MAAMoB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACAF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C,MAAME,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAC1C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uEAAuE1B,SAAS,YAAY,EAAE;QACzH2B,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,WAAW,EAAE/B,QAAQ,CAAC+B,WAAW;UAAEC,UAAU,EAAEX;QAAU,CAAC;MACnF,CAAC,CAAC;MAEF,MAAMY,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClChB,OAAO,CAACC,GAAG,CAAC,iBAAkB,CAAC;MAC/BF,sBAAsB,CAACgB,IAAI,CAACjB,mBAAmB,CAAC;MAEhD,QAAOiB,IAAI,CAACE,WAAW;QACrB,KAAK,CAAC;UACJxB,uBAAuB,CAAC,CAAC,CAAC;UAC1B;QACF,KAAK,CAAC;UACJA,uBAAuB,CAAC,CAAC,CAAC;UAC1B;QACF;UACEA,uBAAuB,CAAC,CAAC,CAAC;MAC9B;MAEA,MAAMyB,WAAW,GAAG,MAAMX,KAAK,CAAC,uEAAuE1B,SAAS,cAAckC,IAAI,CAACjB,mBAAmB,OAAO,EAAE;QAC7JU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE1B,IAAI,EAAE,EAAE;UAAEE,MAAM,EAAE,EAAE;UAAE+B,SAAS,EAAE;QAAG,CAAC,CAAC,CAAE;MACjE,CAAC,CAAC;MAEF,MAAMC,OAAO,GAAG,MAAMF,WAAW,CAACF,IAAI,CAAC,CAAC;MACxC,MAAMrB,gBAAgB,CAAE0B,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAED,OAAO,CAACE,GAAG,CAAC,CAAC;MAClE;MACA;MACA;MACAtB,OAAO,CAACC,GAAG,CAACT,oBAAoB,EAAE,OAAO,CAAC;MAC1CQ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEmB,OAAO,CAACE,GAAG,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAGD,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACFxB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEP,aAAa,CAAC;MAChE,IAAII,mBAAmB,KAAK,IAAI,IAAIJ,aAAa,CAACE,eAAe,CAAC,EAAE;QAClEI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3B,MAAMwB,KAAK,GAAG/B,aAAa,CAACE,eAAe,CAAC,CAAC,kBAAkB,CAAC;QAChE,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,uEAAuE1B,SAAS,cAAciB,mBAAmB,SAAS2B,KAAK,EAAE,EAAE;UAC9JjB,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnB1B,IAAI;YACJE,MAAM;YACN+B,SAAS,EAAE7B;UACb,CAAC;QACH,CAAC,CAAC;QACF,MAAMyB,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QAClChB,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEc,IAAI,CAAC;QAC/C,MAAMpB,gBAAgB,CAAE0B,QAAQ,IAAK;UACnC,MAAMK,OAAO,GAAG,CAAC,GAAGL,QAAQ,CAAC;UAC7BrB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEoB,QAAQ,CAAC;UACxCrB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEc,IAAI,CAAC;UAC7Cf,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEyB,OAAO,CAAC9B,eAAe,CAAC,CAAC;UAC9C8B,OAAO,CAAC9B,eAAe,CAAC,GAAGmB,IAAI;UAC/Bf,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEyB,OAAO,CAAC9B,eAAe,CAAC,CAAC;UAC9C,OAAO8B,OAAO;QAChB,CAAC,CAAC;MAEJ;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C;EACF,CAAC;EAED,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,uEAAuE1B,SAAS,cAAciB,mBAAmB,OAAO,EAAE;QACrJU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE1B,IAAI,EAAE,EAAE;UAAEE,MAAM,EAAE,EAAE;UAAE+B,SAAS,EAAE;QAAG,CAAC,CAAC,CAAE;MACjE,CAAC,CAAC;MAEF,MAAMC,OAAO,GAAG,MAAMd,QAAQ,CAACU,IAAI,CAAC,CAAC;MACrC,MAAMrB,gBAAgB,CAAE0B,QAAQ,IAAK,CAAC,GAAGA,QAAQ,EAAED,OAAO,CAACE,GAAG,CAAC,CAAC;MAClE;IACA,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAGD,MAAMK,eAAe,GAAIC,MAAM,IAAMC,CAAC,IAAK;IACzCD,MAAM,CAACC,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCjC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/B,MAAMuB,OAAO,CAAC,CAAC;IACfrC,OAAO,CAAC,EAAE,CAAC;IACXE,SAAS,CAAC,EAAE,CAAC;IACbE,WAAW,CAAC,EAAE,CAAC;IACf,IAAIT,QAAQ,CAACmC,WAAW,KAAK,CAAC,EAAE;MAAE;MAC9B,MAAMU,YAAY,CAAC,CAAC;MACpB9B,kBAAkB,CAAEqC,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;MAChD;MACAlC,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEP,aAAa,CAAC;IAChE,CAAC,MAAM;MACHX,QAAQ,CAAC,CAAC;IACd;EAGF,CAAC;EAED,MAAMoD,iBAAiB,GAAGA,CAAA,KAAM;IAC9BX,OAAO,CAAC,CAAC;IACT3B,kBAAkB,CAAEqC,SAAS,IAAKE,IAAI,CAACC,GAAG,CAACH,SAAS,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/D,CAAC;EAED,oBACEzD,OAAA;IAAA6D,QAAA,gBACE7D,OAAA;MAAA6D,QAAA,EAAKxD,QAAQ,CAACyD;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxBlE,OAAA;MAAA6D,QAAA,EAAIxD,QAAQ,CAAC8D;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAC5B7D,QAAQ,CAACmC,WAAW,KAAK,CAAC,gBACzBxC,OAAA,CAAAE,SAAA;MAAA2D,QAAA,gBAEE7D,OAAA;QAAA6D,QAAA,GAAG,MAAI,EAAC1C,eAAe,GAAG,CAAC;MAAA;QAAA4C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChClE,OAAA;QAAA6D,QAAA,GAAIxD,QAAQ,CAAC+D,QAAQ,EAAC,KAAG,EAAC/D,QAAQ,CAACgE,QAAQ,EAAC,OAAK;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrDlE,OAAA;QAAA6D,QAAA,GAAG,sBAAoB,EAACxD,QAAQ,CAACiE,WAAW;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,eACjD,CAAC,gBAEHlE,OAAA;MAAA6D,QAAA,EAAG;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACf,eACDlE,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAA6D,QAAA,EAAO;MAAK;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACpBlE,OAAA;QAAOuE,IAAI,EAAC,QAAQ;QAAChB,KAAK,EAAE9C,IAAK;QAAC+D,QAAQ,EAAErB,eAAe,CAACzC,OAAO;MAAE;QAAAqD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC,eACNlE,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAA6D,QAAA,EAAO;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtBlE,OAAA;QAAOuE,IAAI,EAAC,QAAQ;QAAChB,KAAK,EAAE5C,MAAO;QAAC6D,QAAQ,EAAErB,eAAe,CAACvC,SAAS;MAAE;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,eACNlE,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAA6D,QAAA,EAAO;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACzBlE,OAAA;QAAOuE,IAAI,EAAC,QAAQ;QAAChB,KAAK,EAAE1C,QAAS;QAAC2D,QAAQ,EAAErB,eAAe,CAACrC,WAAW;MAAE;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7E,CAAC,eACNlE,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAQyE,OAAO,EAAEf,iBAAkB;QAAAG,QAAA,EAAC;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzDlE,OAAA;QAAQyE,OAAO,EAAEjB,aAAc;QAAAK,QAAA,EAAE;MAAQ;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,eACNlE,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAQyE,OAAO,EAAElE,MAAO;QAAAsD,QAAA,EAAC;MAAiB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACnDlE,OAAA;QAAQyE,OAAO,EAAEnE,QAAS;QAAAuD,QAAA,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACNlE,OAAA;MAAA6D,QAAA,gBACE7D,OAAA;QAAA6D,QAAA,EAAI;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACtBjD,aAAa,CAACyD,GAAG,CAAC,CAAC7B,GAAG,EAAE8B,KAAK,kBAC5B3E,OAAA;QAAA6D,QAAA,GAAe,MAAI,EAACc,KAAK,GAAG,CAAC,EAAC,IAAE,EAAC9B,GAAG,CAACpC,IAAI,EAAC,SAAO,EAACoC,GAAG,CAAClC,MAAM,EAAC,MAAI;MAAA,GAAzDgE,KAAK;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuD,CACrE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1D,EAAA,CAlLIL,YAAY;AAAAyE,EAAA,GAAZzE,YAAY;AAoLlB,eAAeA,YAAY;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}