{"ast":null,"code":"const {\n  Client\n} = require('pg');\nconst AWS = require('aws-sdk');\nconst ssm = new AWS.SSM();\nexports.handler = async event => {\n  console.log('Received event:', JSON.stringify(event, null, 2));\n  let client;\n  let exercises = [];\n  try {\n    // Fetch database credentials from AWS Parameter Store\n    const params = {\n      Name: '/Life/LocalDatabase',\n      WithDecryption: true\n    };\n    const data = await ssm.getParameter(params).promise();\n    const dbConfig = JSON.parse(data.Parameter.Value);\n\n    // Connect to PostgreSQL\n    client = new Client({\n      host: dbConfig.DB_HOST,\n      database: dbConfig.DB_NAME,\n      user: dbConfig.DB_USER,\n      password: dbConfig.DB_PASSWORD,\n      port: dbConfig.DB_PORT\n    });\n    await client.connect();\n    const userId = event.queryStringParameters.userId;\n    const templateId = event.queryStringParameters.templateId;\n    if (!userId || !templateId) {\n      throw new Error('Missing required parameters: userId and templateId.');\n    }\n\n    // Insert a new workout record and get the workout ID\n    const res = await client.query('INSERT INTO fitness.completed_workouts (workout_template_id, user_id) VALUES ($1, $2) RETURNING completed_workout_id', [templateId, userId]);\n    const workoutId = res.rows[0].completed_workout_id;\n    console.log(\"workoutId: \", workoutId);\n\n    // If workout is from a template, load exercises\n    if (templateId) {\n      const exercisesRes = await client.query('SELECT * FROM fitness.workout_exercises WHERE workout_template_id = $1', [templateId]);\n      exercises = exercisesRes.rows.sort((a, b) => a.order - b.order);\n      console.log(\"Exercises: \", exercises);\n    }\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        // Allow all origins for CORS\n        'Access-Control-Allow-Credentials': true // Include credentials for CORS\n      },\n      body: JSON.stringify({\n        workoutId: workoutId.toString(),\n        exercises: exercises // Return exercises\n      })\n    };\n  } catch (err) {\n    console.error(err);\n    return {\n      statusCode: 500,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        // Allow all origins for CORS\n        'Access-Control-Allow-Credentials': true // Include credentials for CORS\n      },\n      body: JSON.stringify({\n        error: 'Internal Server Error',\n        message: err.message\n      })\n    };\n  } finally {\n    if (client) {\n      await client.end();\n    }\n  }\n};","map":{"version":3,"names":["Client","require","AWS","ssm","SSM","exports","handler","event","console","log","JSON","stringify","client","exercises","params","Name","WithDecryption","data","getParameter","promise","dbConfig","parse","Parameter","Value","host","DB_HOST","database","DB_NAME","user","DB_USER","password","DB_PASSWORD","port","DB_PORT","connect","userId","queryStringParameters","templateId","Error","res","query","workoutId","rows","completed_workout_id","exercisesRes","sort","a","b","order","statusCode","headers","body","toString","err","error","message","end"],"sources":["/Users/dominicameneyro/Desktop/Life/Fitness/UI/fitness-workouts/src/components/WorkoutForm.jsx"],"sourcesContent":["const { Client } = require('pg');\nconst AWS = require('aws-sdk');\nconst ssm = new AWS.SSM();\n\nexports.handler = async (event) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n    let client;\n    let exercises = [];\n\n    try {\n        // Fetch database credentials from AWS Parameter Store\n        const params = {\n            Name: '/Life/LocalDatabase',\n            WithDecryption: true\n        };\n        const data = await ssm.getParameter(params).promise();\n        const dbConfig = JSON.parse(data.Parameter.Value);\n\n        // Connect to PostgreSQL\n        client = new Client({\n            host: dbConfig.DB_HOST,\n            database: dbConfig.DB_NAME,\n            user: dbConfig.DB_USER,\n            password: dbConfig.DB_PASSWORD,\n            port: dbConfig.DB_PORT\n        });\n\n        await client.connect();\n\n        const userId = event.queryStringParameters.userId;\n        const templateId = event.queryStringParameters.templateId;\n\n        if (!userId || !templateId) {\n            throw new Error('Missing required parameters: userId and templateId.');\n        }\n\n        // Insert a new workout record and get the workout ID\n        const res = await client.query(\n            'INSERT INTO fitness.completed_workouts (workout_template_id, user_id) VALUES ($1, $2) RETURNING completed_workout_id',\n            [templateId, userId]\n        );\n        const workoutId = res.rows[0].completed_workout_id;\n        console.log(\"workoutId: \", workoutId);\n\n        // If workout is from a template, load exercises\n        if (templateId) {\n            const exercisesRes = await client.query(\n                'SELECT * FROM fitness.workout_exercises WHERE workout_template_id = $1',\n                [templateId]\n            );\n\n            exercises = exercisesRes.rows.sort((a, b) => a.order - b.order);\n            console.log(\"Exercises: \", exercises);\n        }\n\n        return {\n            statusCode: 200,\n            headers: {\n                'Access-Control-Allow-Origin': '*', // Allow all origins for CORS\n                'Access-Control-Allow-Credentials': true, // Include credentials for CORS\n            },\n            body: JSON.stringify({\n                workoutId: workoutId.toString(),\n                exercises: exercises // Return exercises\n            }),\n        };\n    } catch (err) {\n        console.error(err);\n        return {\n            statusCode: 500,\n            headers: {\n                'Access-Control-Allow-Origin': '*', // Allow all origins for CORS\n                'Access-Control-Allow-Credentials': true, // Include credentials for CORS\n            },\n            body: JSON.stringify({ error: 'Internal Server Error', message: err.message }),\n        };\n    } finally {\n        if (client) {\n            await client.end();\n        }\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}