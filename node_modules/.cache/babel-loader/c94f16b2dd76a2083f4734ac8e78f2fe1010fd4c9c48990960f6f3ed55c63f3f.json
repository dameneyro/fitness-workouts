{"ast":null,"code":"const {\n  Client\n} = require('pg');\nconst AWS = require('aws-sdk');\nconst ssm = new AWS.SSM();\nexports.handler = async event => {\n  let client;\n  const {\n    workoutId,\n    exerciseId\n  } = event.pathParameters;\n  const {\n    sets,\n    goal_weight,\n    start_time,\n    end_time\n  } = JSON.parse(event.body);\n  try {\n    const params = {\n      Name: '/Life/LocalDatabase',\n      WithDecryption: true\n    };\n    const data = await ssm.getParameter(params).promise();\n    const dbConfig = JSON.parse(data.Parameter.Value);\n    client = new Client({\n      host: dbConfig.DB_HOST,\n      database: dbConfig.DB_NAME,\n      user: dbConfig.DB_USER,\n      password: dbConfig.DB_PASSWORD,\n      port: dbConfig.DB_PORT\n    });\n    await client.connect();\n    let completedExerciseId;\n    if (!exerciseId) {\n      // Create new exercise\n      const startTime = start_time || new Date().toISOString();\n      const exerciseRes = await client.query('INSERT INTO fitness.completed_exercises (completed_workout_id, exercise_id, start_time) VALUES ($1, $2, $3) RETURNING completed_exercise_id', [workoutId, exerciseId, startTime]);\n      completedExerciseId = exerciseRes.rows[0].completed_exercise_id;\n    } else {\n      // Update existing exercise\n      const endTime = end_time || new Date().toISOString();\n      const exerciseRes = await client.query('UPDATE fitness.completed_exercises SET end_time = $1 WHERE completed_exercise_id = $2 RETURNING completed_exercise_id', [endTime, exerciseId]);\n      completedExerciseId = exerciseRes.rows[0].completed_exercise_id;\n    }\n    for (const set of sets) {\n      if (set.id) {\n        // Update existing set\n        await client.query('UPDATE fitness.completed_sets SET reps = $1, weight = $2, rest_time = $3 WHERE completed_set_id = $4', [set.reps, set.weight, set.rest_time, set.id]);\n      } else {\n        // Create new set\n        await client.query('INSERT INTO fitness.completed_sets (completed_exercise_id, reps, weight, rest_time) VALUES ($1, $2, $3, $4)', [completedExerciseId, set.reps, set.weight, set.rest_time]);\n      }\n    }\n    await client.query('UPDATE fitness.workout_exercises SET goal_weight = $1 WHERE workout_template_id = (SELECT workout_template_id FROM fitness.completed_workouts WHERE completed_workout_id = $2) AND exercise_id = $3', [goal_weight, workoutId, exerciseId]);\n    return {\n      statusCode: 200,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': true\n      },\n      body: JSON.stringify({\n        status: 'success'\n      })\n    };\n  } catch (err) {\n    console.error(err);\n    return {\n      statusCode: 500,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': true\n      },\n      body: JSON.stringify({\n        error: 'Internal Server Error',\n        message: err.message\n      })\n    };\n  } finally {\n    if (client) {\n      await client.end();\n    }\n  }\n};","map":{"version":3,"names":["Client","require","AWS","ssm","SSM","exports","handler","event","client","workoutId","exerciseId","pathParameters","sets","goal_weight","start_time","end_time","JSON","parse","body","params","Name","WithDecryption","data","getParameter","promise","dbConfig","Parameter","Value","host","DB_HOST","database","DB_NAME","user","DB_USER","password","DB_PASSWORD","port","DB_PORT","connect","completedExerciseId","startTime","Date","toISOString","exerciseRes","query","rows","completed_exercise_id","endTime","set","id","reps","weight","rest_time","statusCode","headers","stringify","status","err","console","error","message","end"],"sources":["/Users/dominicameneyro/Desktop/Life/Fitness/UI/fitness-workouts/src/components/ExerciseForm.jsx"],"sourcesContent":["const { Client } = require('pg');\nconst AWS = require('aws-sdk');\nconst ssm = new AWS.SSM();\n\nexports.handler = async (event) => {\n    let client;\n    const { workoutId, exerciseId } = event.pathParameters;\n    const { sets, goal_weight, start_time, end_time } = JSON.parse(event.body);\n\n    try {\n        const params = { Name: '/Life/LocalDatabase', WithDecryption: true };\n        const data = await ssm.getParameter(params).promise();\n        const dbConfig = JSON.parse(data.Parameter.Value);\n\n        client = new Client({\n            host: dbConfig.DB_HOST,\n            database: dbConfig.DB_NAME,\n            user: dbConfig.DB_USER,\n            password: dbConfig.DB_PASSWORD,\n            port: dbConfig.DB_PORT\n        });\n\n        await client.connect();\n\n        let completedExerciseId;\n        if (!exerciseId) {\n            // Create new exercise\n            const startTime = start_time || new Date().toISOString();\n            const exerciseRes = await client.query(\n                'INSERT INTO fitness.completed_exercises (completed_workout_id, exercise_id, start_time) VALUES ($1, $2, $3) RETURNING completed_exercise_id',\n                [workoutId, exerciseId, startTime]\n            );\n            completedExerciseId = exerciseRes.rows[0].completed_exercise_id;\n        } else {\n            // Update existing exercise\n            const endTime = end_time || new Date().toISOString();\n            const exerciseRes = await client.query(\n                'UPDATE fitness.completed_exercises SET end_time = $1 WHERE completed_exercise_id = $2 RETURNING completed_exercise_id',\n                [endTime, exerciseId]\n            );\n            completedExerciseId = exerciseRes.rows[0].completed_exercise_id;\n        }\n\n        for (const set of sets) {\n            if (set.id) {\n                // Update existing set\n                await client.query(\n                    'UPDATE fitness.completed_sets SET reps = $1, weight = $2, rest_time = $3 WHERE completed_set_id = $4',\n                    [set.reps, set.weight, set.rest_time, set.id]\n                );\n            } else {\n                // Create new set\n                await client.query(\n                    'INSERT INTO fitness.completed_sets (completed_exercise_id, reps, weight, rest_time) VALUES ($1, $2, $3, $4)',\n                    [completedExerciseId, set.reps, set.weight, set.rest_time]\n                );\n            }\n        }\n\n        await client.query(\n            'UPDATE fitness.workout_exercises SET goal_weight = $1 WHERE workout_template_id = (SELECT workout_template_id FROM fitness.completed_workouts WHERE completed_workout_id = $2) AND exercise_id = $3',\n            [goal_weight, workoutId, exerciseId]\n        );\n\n        return {\n            statusCode: 200,\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Credentials': true,\n            },\n            body: JSON.stringify({ status: 'success' }),\n        };\n    } catch (err) {\n        console.error(err);\n        return {\n            statusCode: 500,\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Credentials': true,\n            },\n            body: JSON.stringify({ error: 'Internal Server Error', message: err.message }),\n        };\n    } finally {\n        if (client) {\n            await client.end();\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}